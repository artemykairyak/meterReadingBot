const Sequelize = require('sequelize')
require('dotenv').config()
const Op = Sequelize.Op
const {PORT} = require('./config')
const express = require('express')
const {sendMetersData} = require('./controllers/commonController')
const {startCommandMethods} = require('./controllers/startCommandController')
const {checkUserData} = require('./controllers/startCommandController')
const {deleteUserData} = require('./controllers/deleteCommandController')
const {sendError} = require('./controllers/commonController')
const {onOneCommandAction} = require('./controllers/oneCommandController')
const {onStartCommandAction} = require('./controllers/startCommandController')
const {onDecline} = require('./controllers/commonController')
const {db} = require('./db')
const app = express()
const {Meter} = require('./models/Meter')
const {getChatId, getUserId} = require('./helpers')
const {getHelp} = require('./controllers/helpCommandController')
const {setStage} = require('./controllers/commonController')
const {sessions} = require('./config')
const {bot} = require('./config')


bot.onText(/\/start/, async (msg) => {
    const chatId = getChatId(msg)
    const userId = getUserId(msg)
    sessions.set(userId, {stage: 'sleep'})
    const isUserData = await checkUserData(chatId, userId)

    if (!isUserData) {
        await setStage(userId, 'start', 'setColdWaterMeterNumbers')
        await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á—ë—Ç—á–∏–∫–æ–≤. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
        await bot.sendMessage(chatId, `üöø –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ <b><i>—Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã</i></b> (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)`, {
            reply_markup: {
                keyboard: [
                    ['–û—Ç–º–µ–Ω–∞']
                ]
            },
            parse_mode: 'HTML'
        })
    }
})

bot.onText(/\/help/, async (msg) => {
    const chatId = getChatId(msg)

    await getHelp(chatId)
})

bot.onText(/\/delete/, async (msg) => {
    const chatId = getChatId(msg)
    const userId = getUserId(msg)

    await deleteUserData(chatId, userId)
})

bot.onText(/\/one/, async (msg) => {
    const chatId = getChatId(msg)
    const userId = getUserId(msg)
    await setStage(userId, 'one', 'selectMeter')

    const metersKeyboardArr = [['–û—Ç–º–µ–Ω–∞']]
    const isMeters = await Meter.findOne({where: {userId}})

    console.log('ISSS', isMeters)

    if (!isMeters) {
        await bot.sendMessage(chatId, `üôÅ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞. –î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /start`, {parse_mode: 'HTML'})
    } else {
        const meters = await Meter.findAll({
            where: {
                userId, type: {[Op.or]: ['–ì–∞–∑', '–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è']}
            }, attributes: ['meterNumber', 'type']
        })

        const waterMeter = await Meter.findOne({where: {userId, type: {[Op.or]: ['–•–í–°', '–ì–í–°']}}, attributes: ['type']})
        waterMeter.type = '–•–í–° + –ì–í–°'

        meters.push(waterMeter)

        for (let i = 0; i < meters.length; i += 2) {
            const firstElem = `${meters[i].type} ${meters[i]?.meterNumber ? `(${meters[i].meterNumber})` : ''}`
            const secondElem = meters[i + 1] ? `${meters[i + 1].type} ${meters[i + 1]?.meterNumber ? `(${meters[i + 1].meterNumber})` : ''}` : null

            if (secondElem) {
                metersKeyboardArr.push([firstElem, secondElem])
            } else {
                metersKeyboardArr.push([firstElem])
            }
        }


        await bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π.\n(–ü–æ–∫–∞–∑–∞–Ω–∏—è –•–í–° –∏ –ì–í–° –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)`, {
            reply_markup: {
                keyboard: metersKeyboardArr
            }
        })
    }
})

bot.on('message', async (msg) => {
    const chatId = getChatId(msg)
    const userId = getUserId(msg)

    const session = sessions.get(userId)

    console.log('MESSAGE SESS', session)

    if (msg.text === '–û—Ç–º–µ–Ω–∞') {
        if (session?.stage === 'start') {
            await Meter.destroy({where: {userId}})
        }
        await onDecline(msg)
    } else if (msg.text === '–û—Ç–ø—Ä–∞–≤–∏—Ç—å') {
        if (session?.stage === 'one') {
            await sendMetersData(msg)
        }
    } else {
        if (session?.stage === 'start') {
            switch (session.method) {
                case 'setColdWaterMeterNumbers':
                    console.log('HERE')
                    return await onStartCommandAction(msg, 'setHotWaterMeterNumbers', 'üöø', 'meters', '–≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã')
                case 'setHotWaterMeterNumbers':
                    return await onStartCommandAction(msg, 'setWaterAccount', 'üìÉ', 'account', '–•–í–° –∏ –ì–í–°')
                case 'setWaterAccount':
                    return await onStartCommandAction(msg, 'setWaterPhone', '‚òé', 'phone', '–•–í–° –∏ –ì–í–°')
                case 'setWaterPhone':
                    return await onStartCommandAction(msg, 'setEnergyMeterNumbers', '‚ö°', 'meters', '—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏')
                case 'setEnergyMeterNumbers':
                    return await onStartCommandAction(msg, 'setEnergyAccount', 'üìÉ', 'account', '—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏')
                case 'setEnergyAccount':
                    return await onStartCommandAction(msg, 'setEnergyPhone', '‚òé', 'phone', '—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏')
                case 'setEnergyPhone':
                    return await onStartCommandAction(msg, 'setGasMeterNumbers', 'üî•', 'meters', '–≥–∞–∑–∞')
                case 'setGasMeterNumbers':
                    return await onStartCommandAction(msg, 'setGasAccount', 'üìÉ', 'account', '–≥–∞–∑–∞')
                case 'setGasAccount':
                    return await onStartCommandAction(msg, 'setGasPhone', '‚òé', 'phone', '–≥–∞–∑–∞')
                case 'setGasPhone':
                    const gasPhoneRes = await startCommandMethods[session.method](userId, msg.text)
                    if (gasPhoneRes) {
                        await setStage(userId, 'help', 'getHelp')
                        await bot.sendMessage(chatId, `ü•≥ –û—Ç–ª–∏—á–Ω–æ! –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∞ –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è.`, {
                            reply_markup: {
                                remove_keyboard: true
                            },
                            parse_mode: 'HTML'
                        })
                        await getHelp(chatId)
                    } else {
                        await sendError(chatId, `\ud83d\ude2b –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑`, {parse_mode: 'HTML'})
                    }
                    break
            }
        }

        if (session?.stage === 'one') {
            switch (session.method) {
                case 'selectMeter':
                    if (msg.text.includes('–•–í–°') || msg.text.includes('–ì–í–°')) {
                        return await onOneCommandAction(msg, 'setColdWaterMetersData')
                    }
                    return await onOneCommandAction(msg, 'setOneMeterData')
                case 'setColdWaterMetersData':
                    return await onOneCommandAction(msg, 'setHotWaterMetersData')
                case 'setHotWaterMetersData':
                    return await onOneCommandAction(msg, 'finalCheckOneMeterData')
                case 'setOneMeterData':
                    return await onOneCommandAction(msg, 'finalCheckOneMeterData')
                case 'finalCheckOneMeterData':
                    return await onOneCommandAction(msg)
            }
        }

        // if (session?.stage === 'oneWater') {
        //     switch (session.method) {
        //         case 'setColdWaterMetersData':
        //             return await onOneCommandAction(msg, 'setColdMeterData')
        //     }
        // }
    }
})

const start = async () => {
    try {
        await db.sync()
        app.listen(PORT, () => {
            console.log(`SERVER STARTED ON ${PORT} PORT`)
        })
    } catch (e) {
        console.log(e)
    }
}

start()

